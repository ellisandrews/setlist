# # Base image for *build environment*
# FROM node:13.12.0-alpine as build

# # Set working directory
# WORKDIR /setlist-frontend

# # Add app code
# COPY . .

# # Install app dependencies
# RUN npm install

# # Build the production app
# RUN npm run build

# # Serve the app with nginx
# FROM nginx:stable-alpine
# COPY --from=build /setlist-frontend/build /usr/share/nginx/html
# EXPOSE 80
# CMD ["nginx", "-g", "daemon off;"]

# ### STAGE 1: Build ###
# FROM node:13.12.0-alpine as build
# RUN mkdir /usr/src/app
# WORKDIR /usr/src/app
# ENV PATH /usr/src/app/node_modules/.bin:$PATH
# COPY package.json /usr/src/app/package.json
# RUN npm install
# RUN npm install react-scripts -g
# COPY . /usr/src/app
# RUN npm run build

# ### STAGE 2: Production Environment ###
# FROM nginx:1.13.12-alpine
# COPY --from=build /usr/src/app/build /usr/share/nginx/html
# EXPOSE 80
# CMD ["nginx", "-g", "daemon off;"]


# stage1 - build react app first 
FROM node:13.12.0-alpine as build
WORKDIR /setlist-frontend
ENV PATH /setlist-frontend/node_modules/.bin:$PATH
COPY ./package.json /setlist-frontend/package.json
RUN npm install
COPY . /setlist-frontend
RUN npm run build

# stage 2 - build the final image and copy the react build files
FROM nginx:1.17.8-alpine
COPY --from=build /setlist-frontend/build /usr/share/nginx/html
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx/nginx.conf /etc/nginx/conf.d
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]